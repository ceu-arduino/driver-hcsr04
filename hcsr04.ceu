#ifndef HCSR04_ECHO
#error Missing interrupt pin `HCSR04_ECHO`.
#endif
#ifndef HCSR04_TRIGGER
#error Missing output pin `HCSR04_TRIGGER`.
#endif

///////////////////////////////////////////////////////////////////////////////
// INTERFACE
///////////////////////////////////////////////////////////////////////////////

code/await HCSR04_Init (var int energyPort, var int? time) -> NEVER;
code/await HCSR04_Read (var int? energyPort, var int? time) -> int?;

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION
///////////////////////////////////////////////////////////////////////////////

#include "wclock.ceu"

#define HCSR04_SENSOR_DEFAULT_TIME 80
var bool hcsr04_single_turn_on = false;

code/await HCSR04_Init (var int energyPort, var int? time) -> NEVER do
    do finalize with
        _digitalWrite(energyPort, low);
        outer.hcsr04_single_turn_on = false;
    end

    outer.hcsr04_single_turn_on = true;

    //turn on
    {
        pinMode(@energyPort, OUTPUT);
        digitalWrite(@energyPort, HIGH);
    }

    // waits for the circuit to stabilize
    if (time?) then
        await (time!)ms;
    else
        await (HCSR04_SENSOR_DEFAULT_TIME)ms;
    end

    await FOREVER;
end

code/await HCSR04_Read (var int? energyPort, var int? time) -> int? do

    do finalize with
        if ((outer.hcsr04_single_turn_on == false) and (energyPort?)) then
            _digitalWrite(energyPort!, low);
        end
    end

    if ((outer.hcsr04_single_turn_on == false) and (energyPort?)) then
        //turn on
        {
            pinMode(@energyPort!, OUTPUT);
            digitalWrite(@energyPort!, HIGH);
        }

        // waits for the circuit to stabilize
        if (time?) then
            await (time!)ms;
        else
            await (HCSR04_SENSOR_DEFAULT_TIME)ms;
        end
    end

    emit HCSR04_TRIGGER(high);
    call WCLOCK_Freeze(10);
    emit HCSR04_TRIGGER(low);

    var int? ret;

    watching 25ms do
        await HCSR04_ECHO;
        var u32 old = call WCLOCK_Now();
        await HCSR04_ECHO;
        var u32 now = call WCLOCK_Now();
        ret = (((now - old) as int)/58) as int;
    end

    escape ret;
end
